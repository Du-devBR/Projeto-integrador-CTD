# Define stages
stages:
  - build_back
  - test_back
  - build_front
  - test_front

# Define variables
variables:
  # Define the Docker image name and tag
  DOCKER_IMAGE_BACK: "gitlab.ctd.academy:5050/ctd/brasil/projeto-integrador-1/0223/turma-5/grupo-5/digital-booking-api"
  DOCKER_IMAGE_FRONT: "gitlab.ctd.academy:5050/ctd/brasil/projeto-integrador-1/0223/turma-5/grupo-5/digital-booking-app"
  DOCKER_IMAGE_TAG: "latest" 

#
#  Back-end section
#
# Define the build job
build:
  # Define the stage
  stage: build_back
  # Define the image to use
  image: maven:3.9.0-amazoncorretto-17
  # Define the type of runner
  tags:
    - docker
  # Define the Maven build command
  script:
    - cd "backEnd/digitalBooking"
    - mvn clean package -DskipTests=true
  # Define the artifacts that we want to keep after the job is completed
  artifacts:
    paths:
      - target/*.jar

# Define the test job
test:
  # Define the stage
  stage: test_back
  # Define the image to use
  image: maven:3.9.0-amazoncorretto-17
  # Define the type of runner
  tags:
    - docker
  # Define the Maven build command
  script:
    - cd "backEnd/digitalBooking"
    - mvn test



#
# Front-end section
#
cache:
  paths:
    - node_modules/

# Define the build job for front-end
build_front:
  # Define the stage
  stage: build_front
  # Define the image to use
  image: node:12.13.0
  # Define the type of runner
  tags:
    - docker
  # Define the script to run
  script:
    - cd "frontEnd/Dh-booking"
    # Install dependencies
    - npm install
    # Build the project
    - npm run build

# Define the test job for front-end
test_front:
  # Define the stage
  stage: test_front
  # Define the image to use
  image: node:12.13.0
  # Define the type of runner
  tags:
    - docker
  # Define the script to run
  script:
    - cd "frontEnd/Dh-booking"
    # Install dependencies
    - npm install
    # Run the tests
    - npm run test

